# -*- coding: utf-8 -*-
"""AdamvsGsd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o7ZIFyt685yFUDWC2wTtH2bXBZbg8NS6
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt

# Load MNIST dataset (handwritten digits)
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize

# Define loss functions
loss_functions = ["sparse_categorical_crossentropy", "categorical_crossentropy"]
history_dict = {}

for loss in loss_functions:
    # Define a new model inside the loop (to prevent errors)
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=(28, 28)),  # Input layer
        keras.layers.Dense(128, activation='relu'),  # Hidden layer
        keras.layers.Dense(10, activation='softmax') # Output layer (10 classes)
    ])

    # Convert labels to one-hot encoding if using categorical_crossentropy
    y_train_labels = keras.utils.to_categorical(y_train, num_classes=10) if loss == "categorical_crossentropy" else y_train
    y_test_labels = keras.utils.to_categorical(y_test, num_classes=10) if loss == "categorical_crossentropy" else y_test

 # Train models with Adam and SGD
    optimizers = {'Adam': tf.keras.optimizers.Adam(), 'SGD': tf.keras.optimizers.SGD()}

    for opt_name, optimizer in optimizers.items():
        model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])
        print(f"Training with {opt_name} and loss function: {loss}...")
        history = model.fit(x_train, y_train_labels, validation_data=(x_test, y_test_labels), epochs=5, batch_size=32, verbose=2)
        history_dict[f"{opt_name}_{loss}"] = history

# Plot training and validation accuracy
plt.figure(figsize=(10, 5))
for key, history in history_dict.items():
    plt.plot(history.history['val_loss'], label=f"Validation Loss ({key})")

plt.xlabel('Epochs')
plt.ylabel('Validation Loss')
plt.title('Adam vs. SGD Performance with Different Loss Functions')
plt.legend()
plt.show()